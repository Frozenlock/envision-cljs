* envision-cljs

  A clojurescript wrapper for the [[https://github.com/HumbleSoftware/envisionjs][Envision.js]] library
  
  [[./graph.png]]
  (Click [[http://www.humblesoftware.com/envision][here]] for examples)
  
** Usage
   
   Add =[org.clojars.frozenlock/envision-cljs "0.2.0"]= to your
   project dependencies.

   You will also need to add the =envision.js= or =envision.min.js= in the
   head of your webpage. (Unfortunately it doesn't work with the google
   closure compiler, so you have to add it manually.)

   You can also include the minified envision js as a preamble in your
   cljs project, by adding this
: :preamble ["HumbleSoftware/envision.min.js"]
   to the :compiler section of project.clj


   For full goodies, also add the =envision.min.css=! If you don't add
   the CSS, you'll have to style the 'handles' yourself. Without a CSS,
   you will NOT see them.

   All the envision stuff can be found on the  [[https://github.com/HumbleSoftware/envisionjs][envision repository]].

** Clojurescript

   The wrapper takes care of converting clj maps to javascript, so you
   can use clojure hash-maps directly!
   
   There is already two templates present in this wrapper:
   =timeseries= and =finance=. Both can be used directly or as an
   example to build your own graph making functions.

   Almost every configuration is passed throught with smap, so be sure
   to use the =recursive-merge= function in order to easily merge your
   configs maps together!


: (ns my-ns
:   (:require [envision-cljs.core :as v]))
: 
: ;; First we need to generate some data
: (let [x-axis (range 500)
:       y1-axis (map #(js/Math.sin (/ % 10)) x-axis)
:       y2-axis (map #(js/Math.cos (/ % 50)) x-axis)
:       serie-1 [x-axis, y1-axis]
:       serie-2 {:points {:show true} ;; these config will be applied to each view (detail AND summary)
:                :shadowSize 4
:                :data [x-axis, y2-axis]}
:       raw-data [serie-1, serie-2]]
: 
: ;; now let's make a graph!
:   (v/timeseries {:container (js/document.getElementById "graph") ;; provided you have a div element "graph" in the DOM
:                  :detail {:data raw-data}
:                  :summary {:data raw-data}}))

   
** License
   
   Copyright Â© 2013 Frozenlock
   
   Distributed under the Eclipse Public License, the same as Clojure.
